#!/bin/sh

# Script d'entr√©e pour le conteneur Laravel GMAO Trans'urb

set -e

echo "üöÄ D√©marrage de l'application GMAO Trans'urb..."

# Fonction pour attendre qu'un service soit pr√™t
wait_for_service() {
    local host=$1
    local port=$2
    local service_name=$3
    local max_attempts=30
    local attempt=1
    
    echo "‚è≥ Attente de $service_name ($host:$port)..."
    while ! nc -z "$host" "$port" >/dev/null 2>&1; do
        if [ $attempt -eq $max_attempts ]; then
            echo "‚ùå Timeout en attendant $service_name apr√®s $max_attempts tentatives"
            return 1
        fi
        echo "   Tentative $attempt/$max_attempts..."
        sleep 2
        attempt=$((attempt + 1))
    done
    echo "‚úÖ $service_name est pr√™t !"
    return 0
}

# Attendre la base de donn√©es si elle est configur√©e
if [ "$DB_CONNECTION" = "mysql" ] && [ -n "$DB_HOST" ]; then
    wait_for_service "$DB_HOST" "${DB_PORT:-3306}" "MySQL"
fi

# Attendre Redis s'il est configur√©
if [ -n "$REDIS_HOST" ]; then
    wait_for_service "$REDIS_HOST" "${REDIS_PORT:-6379}" "Redis"
fi

# G√©n√©rer la cl√© d'application si elle n'existe pas
if [ -z "$APP_KEY" ] || [ "$APP_KEY" = "" ]; then
    echo "üîë G√©n√©ration de la cl√© d'application..."
    php artisan key:generate --force --no-interaction
fi

# Cr√©er le r√©pertoire de sessions s'il n'existe pas
mkdir -p storage/framework/sessions

# Cr√©er la base de donn√©es SQLite si elle est utilis√©e
if [ "$DB_CONNECTION" = "sqlite" ]; then
    echo "üìÑ Configuration de SQLite..."
    touch "${DB_DATABASE:-database/database.sqlite}"
    chmod 664 "${DB_DATABASE:-database/database.sqlite}"
fi

# Ex√©cuter les migrations
echo "üóÑÔ∏è  Ex√©cution des migrations..."
php artisan migrate --force --no-interaction || echo "‚ö†Ô∏è  Les migrations ont √©chou√©, continuons..."

# Cr√©er le lien symbolique pour le stockage
if [ ! -L public/storage ]; then
    echo "üîó Cr√©ation du lien symbolique pour le stockage..."
    php artisan storage:link || echo "‚ö†Ô∏è  Cr√©ation du lien symbolique √©chou√©e"
fi

# Optimiser les configurations Laravel si en production
if [ "$APP_ENV" = "production" ]; then
    echo "‚öôÔ∏è  Optimisation des configurations..."
    php artisan config:cache || echo "‚ö†Ô∏è  Cache de configuration √©chou√©"
    php artisan route:cache || echo "‚ö†Ô∏è  Cache de routes √©chou√©"
    php artisan view:cache || echo "‚ö†Ô∏è  Cache de vues √©chou√©"
fi

# Optimiser l'autoloader
echo "üöÄ Optimisation de l'autoloader..."
composer dump-autoload --optimize || echo "‚ö†Ô∏è  Optimisation de l'autoloader √©chou√©e"

# D√©finir les permissions appropri√©es
echo "üîê Configuration des permissions..."
chown -R www-data:www-data storage bootstrap/cache || echo "‚ö†Ô∏è  Configuration des permissions √©chou√©e"
chmod -R 775 storage bootstrap/cache || echo "‚ö†Ô∏è  Configuration des permissions √©chou√©e"

# Ex√©cuter les seeders en production si demand√©
if [ "$APP_ENV" = "production" ] && [ "$RUN_SEEDERS" = "true" ]; then
    echo "üå± Ex√©cution des seeders..."
    php artisan db:seed --force || echo "‚ö†Ô∏è  Seeders √©chou√©s"
fi

echo "‚úÖ Application GMAO Trans'urb pr√™te !"

# Ex√©cuter la commande principale
exec "$@"